import logging
import time
import threading
import requests
import uuid
import base64
from flask import Flask, request, jsonify
from flask_cors import CORS
from urllib3.exceptions import InsecureRequestWarning

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)
app = Flask(__name__)
CORS(app)

# --- 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat ---
GIGACHAT_CLIENT_ID = "0199ca88-1ca2-7766-89d1-fe395b8267fc"
GIGACHAT_CLIENT_SECRET = "dd87c36f-0c27-4867-8262-a83ea80996e8"


GIGACHAT_OAUTH_URL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth'
GIGACHAT_COMPLETIONS_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions'

# --- 3. –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ---
token_storage = {"access_token": None, "expires_at": 0}
token_lock = threading.Lock()


def get_new_gigachat_token():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞."""
    request_id = str(uuid.uuid4())
    app.logger.info(f"üîë –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ GigaChat (RqUID: {request_id})")

    # –§–æ—Ä–º–∏—Ä—É–µ–º Authorization –∑–∞–≥–æ–ª–æ–≤–æ–∫
    credentials = f"{GIGACHAT_CLIENT_ID}:{GIGACHAT_CLIENT_SECRET}"
    encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': request_id,
        'Authorization': f'Basic {encoded_credentials}'
    }

    payload = {'scope': 'GIGACHAT_API_PERS'}

    try:
        response = requests.post(
            GIGACHAT_OAUTH_URL,
            headers=headers,
            data=payload,
            verify=False,
            timeout=10
        )

        if response.status_code != 200:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ ({response.status_code}): {response.text}")
            return None

        token_info = response.json()

        with token_lock:
            token_storage["access_token"] = token_info["access_token"]
            token_storage["expires_at"] = (token_info["expires_at"] / 1000) - 60  # -1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –∑–∞–ø–∞—Å–∞

        app.logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return token_storage["access_token"]

    except requests.exceptions.RequestException as e:
        app.logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def get_valid_token():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    with token_lock:
        if token_storage["access_token"] is None or token_storage["expires_at"] <= time.time():
            app.logger.info("‚ôªÔ∏è  –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º...")
            return get_new_gigachat_token()
        return token_storage["access_token"]


def background_token_refresher(interval_minutes=50):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç."""
    while True:
        time.sleep(interval_minutes * 60)
        app.logger.info("üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        get_new_gigachat_token()


# --- 4. –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç API ---
@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def proxy_chat():
    if request.method == 'OPTIONS':
        return '', 204

    app.logger.info("üì© –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /api/chat")
    client_data = request.get_json(silent=True)

    if not client_data:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"}), 400

    access_token = get_valid_token()
    if not access_token:
        return jsonify({
            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç GigaChat. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Client ID/Secret."
        }), 502

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    try:
        app.logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat...")
        response = requests.post(
            GIGACHAT_COMPLETIONS_URL,
            headers=headers,
            json=client_data,
            verify=False,
            timeout=30
        )

        app.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat: {response.status_code}")
        app.logger.debug(f"–û—Ç–≤–µ—Ç: {response.text[:300]}")
        if response.status_code != 200:
            return jsonify({
                "error": f"GigaChat –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {response.status_code}",
                "details": response.text
            }), response.status_code

        return jsonify(response.json()), 200

    except requests.exceptions.Timeout:
        app.logger.error("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat.")
        return jsonify({"error": "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat –∏—Å—Ç–µ–∫–ª–æ."}), 504
    except Exception as e:
        app.logger.error(f"üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."}), 500


# --- 5. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == '__main__':
    # –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    get_new_gigachat_token()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç
    threading.Thread(target=background_token_refresher, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host='0.0.0.0', port=5000, debug=True)