import logging
import time
import threading
import requests
import uuid
import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from urllib3.exceptions import InsecureRequestWarning

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

app = Flask(__name__)
CORS(app)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat ---
GIGACHAT_OAUTH_URL = "https://gigachat.devices.sberbank.ru/api/v1/models"
GIGACHAT_COMPLETIONS_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

# --- –í—Å—Ç–∞–≤—å —Å—é–¥–∞ Authorization key –∏–∑ –ø–∞–Ω–µ–ª–∏ –°–±–µ—Ä–∞ ---
AUTHORIZATION_KEY = "MDE5OWE2ZDgtZjA3NC03MzBmLTg1MWMtYjg0MjZmMjIyYmFlOmFhMTljMGI2LTYwYzAtNDllNi1hODk1LTc2Y2IzZGRiNzhiMQ=="

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ---
token_storage = {"access_token": None, "expires_at": 0}
token_lock = threading.Lock()


def kill_port(port):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞."""
    try:
        os.system(f"lsof -ti :{port} | xargs kill -9 2>/dev/null")
        logging.info(f"üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –ø–æ—Ä—Ç {port}")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}: {e}")


def get_new_gigachat_token():
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞."""
    request_id = str(uuid.uuid4())
    app.logger.info(f"üîë –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ GigaChat (RqUID: {request_id})")

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": request_id,
        "Authorization": f"Basic {AUTHORIZATION_KEY}"
    }

    payload = {"scope": "GIGACHAT_API_B2B"}

    try:
        response = requests.post(
            GIGACHAT_OAUTH_URL,
            headers=headers,
            data=payload,
            verify=False,
            timeout=10
        )

        if response.status_code != 200:
            app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ ({response.status_code}): {response.text}")
            return None

        token_info = response.json()

        with token_lock:
            token_storage["access_token"] = token_info["access_token"]
            token_storage["expires_at"] = (token_info["expires_at"] / 1000) - 60

        app.logger.info("‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return token_storage["access_token"]

    except requests.exceptions.RequestException as e:
        app.logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def get_valid_token():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –æ–±–Ω–æ–≤–ª—è—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    with token_lock:
        if token_storage["access_token"] is None or token_storage["expires_at"] <= time.time():
            app.logger.info("‚ôªÔ∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º...")
            return get_new_gigachat_token()
        return token_storage["access_token"]


def background_token_refresher(interval_minutes=50):
    """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç."""
    while True:
        time.sleep(interval_minutes * 60)
        app.logger.info("üîÑ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        get_new_gigachat_token()


@app.route("/api/chat", methods=["POST", "OPTIONS"])
def proxy_chat():
    if request.method == "OPTIONS":
        return "", 204

    app.logger.info("üì© –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /api/chat")
    client_data = request.get_json(silent=True)

    if not client_data:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞"}), 400

    access_token = get_valid_token()
    if not access_token:
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç GigaChat"}), 502

    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

    try:
        response = requests.post(
            GIGACHAT_COMPLETIONS_URL,
            headers=headers,
            json=client_data,
            verify=False,
            timeout=30
        )
        app.logger.info(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat: {response.status_code}")
        return jsonify(response.json()), response.status_code
    except Exception as e:
        app.logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat"}), 500


if __name__ == "__main__":
    kill_port(5000)
    get_new_gigachat_token()
    threading.Thread(target=background_token_refresher, daemon=True).start()
    app.run(host="0.0.0.0", port=5000, debug=True)


